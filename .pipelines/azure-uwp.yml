trigger:
- release/*

pool:
  vmImage: 'windows-2022'

variables:
  solution: 'src\Blauhaus.DeviceServices.sln'
  buildPlatform: 'Any CPU'
  DotNetVersion: 7.0.100
  VersionName: $[replace(variables['Build.SourceBranchName'], 'refs/heads/release/', '')]
  buildConfiguration: 'Release'
  OutputFolder: '$(build.artifactStagingDirectory)'

steps: 

- task: Bash@3
  displayName: List
  inputs:
    targetType: 'inline'
    script: |
        cd $(OutputFolder)
        ls

- task: UseDotNet@2
  displayName: .NET Version
  inputs:
    packageType: 'sdk'
    version: '$(DotNetVersion)'

- task: CmdLine@2
  displayName: Install MAUI
  inputs:
    script: 'dotnet workload install maui'

- task: Bash@3
  displayName: Restore nuget
  inputs:
    targetType: 'inline'
    script: |
        dotnet restore '$(solution)' 

- task: MSBuild@1
  inputs:
    solution: './src/Blauhaus.DeviceServices/Blauhaus.DeviceServices.csproj'
    configuration: 'Release'
    msbuildArgs: '/p:TargetFramework=netstandard2.0 /t:build /p:Version=$(VersionName) /p:PackageOutputPath=$(OutputFolder)'
  
- task: Bash@3
  displayName: Build
  inputs:
    targetType: 'inline'
    script: |  
        dotnet publish ./src/Blauhaus.DeviceServices/Blauhaus.DeviceServices.csproj -f netstandard2.0 -c Release -o $(build.sourcesdirectory) --no-build
        dotnet publish ./src/Blauhaus.DeviceServices/Blauhaus.DeviceServices.csproj -f uap10.0.19041 -c Release -o $(build.sourcesdirectory) --no-build
        dotnet publish ./src/Blauhaus.DeviceServices/Blauhaus.DeviceServices.csproj -f MonoAndroid10.0 -c Release -o $(build.sourcesdirectory) --no-build
        dotnet publish ./src/Blauhaus.DeviceServices/Blauhaus.DeviceServices.csproj -f Xamarin.iOS10 -c Release -o $(build.sourcesdirectory) --no-build
        dotnet publish ./src/Blauhaus.DeviceServices.Abstractions/Blauhaus.DeviceServices.Abstractions.csproj -f netstandard2.0 -c Release -o $(OutputFolder) 
        dotnet publish ./src/Blauhaus.DeviceServices.Maui/Blauhaus.DeviceServices.Maui.csproj -f net7.0 -c Release -o $(OutputFolder) 
        dotnet publish ./src/Blauhaus.DeviceServices.Maui/Blauhaus.DeviceServices.Maui.csproj -f net7.0-ios -c Release -o $(OutputFolder) 
        dotnet publish ./src/Blauhaus.DeviceServices.Maui/Blauhaus.DeviceServices.Maui.csproj -f net7.0-android -c Release -o $(OutputFolder) 
        dotnet publish ./src/Blauhaus.DeviceServices.Maui/Blauhaus.DeviceServices.Maui.csproj -f net7.0-windows10.0.19041 -c Release  -o $(OutputFolder) 
        dotnet publish ./src/Blauhaus.DeviceServices.Maui/Blauhaus.DeviceServices.Maui.csproj -f net7.0-maccatalyst -c Release  -o $(OutputFolder) 
        dotnet publish ./src/Blauhaus.DeviceServices.Blazor/Blauhaus.DeviceServices.Blazor.csproj -f net7.0 -c Release -o $(OutputFolder) 
        dotnet publish ./src/Blauhaus.DeviceServices.TestHelpers/Blauhaus.DeviceServices.TestHelpers.csproj -f net7.0  -c Release -o $(OutputFolder) 

- task: Bash@3
  displayName: Pack
  inputs:
    targetType: 'inline'
    script: | 
        dotnet pack ./src/Blauhaus.DeviceServices/Blauhaus.DeviceServices.csproj -c Release -o $(OutputFolder) -p:PackageVersion=$(VersionName) --no-build
        dotnet pack ./src/Blauhaus.DeviceServices.Abstractions/Blauhaus.DeviceServices.Abstractions.csproj -c Release -o $(OutputFolder) -p:PackageVersion=$(VersionName) --no-build
        dotnet pack ./src/Blauhaus.DeviceServices.Maui/Blauhaus.DeviceServices.Maui.csproj -c Release -o $(OutputFolder) -p:PackageVersion=$(VersionName) --no-build
        dotnet pack ./src/Blauhaus.DeviceServices.Blazor/Blauhaus.DeviceServices.Blazor.csproj -c Release -o $(OutputFolder) -p:PackageVersion=$(VersionName) --no-build
        dotnet pack ./src/Blauhaus.DeviceServices.TestHelpers/Blauhaus.DeviceServices.TestHelpers.csproj -c Release -o $(OutputFolder) -p:PackageVersion=$(VersionName) --no-build

        
- task: Bash@3
  displayName: List
  inputs:
    targetType: 'inline'
    script: |
        cd $(OutputFolder)
        ls

- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(build.sourcesdirectory)/**/*.nupkg;!$(build.sourcesdirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'Blauhaus Nuget'

